# This Ingress makes sure oauth2-proxy intercepts requests going to the /oauth2
# path. This path *must not* be secured, to prevent a redirection loop.
apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  name: prometheus-tls-oauth
  namespace: default
  annotations:
    kubernetes.io/tls-acme: "true"
    kubernetes.io/ingress.class: "nginx"
spec:
  tls:
  - hosts:
    - prometheus.{{GCLOUD_PROJECT}}.measurementlab.net
    secretName: prometheus-tls
  rules:
  - host: prometheus.{{GCLOUD_PROJECT}}.measurementlab.net
    http:
      paths:
      - backend:
          serviceName: oauth2-proxy
          servicePort: 4180
        path: /oauth2
---
apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  name: prometheus-tls
  namespace: default
  annotations:
    kubernetes.io/tls-acme: "true"
    kubernetes.io/ingress.class: "nginx"
    # Set authentication URL and sign-in URL for OAuth.
    nginx.ingress.kubernetes.io/auth-url: "https://$host/oauth2/auth"
    nginx.ingress.kubernetes.io/auth-signin: "https://$host/oauth2/start?rd=$escaped_request_uri"
    # Make sure the user and email are available to the proxied application
    # in the X-User and X-Email headers.
    nginx.ingress.kubernetes.io/configuration-snippet: |
      auth_request_set $user   $upstream_http_x_auth_request_user;
      auth_request_set $email  $upstream_http_x_auth_request_email;
      proxy_set_header X-User  $user;
      proxy_set_header X-Email $email;
spec:
  tls:
  - hosts:
    - prometheus.{{GCLOUD_PROJECT}}.measurementlab.net
    secretName: prometheus-tls
  rules:
  - host: prometheus.{{GCLOUD_PROJECT}}.measurementlab.net
    http:
      paths:
      - path: /
        backend:
          serviceName: prometheus-tls-service
          servicePort: 9090
