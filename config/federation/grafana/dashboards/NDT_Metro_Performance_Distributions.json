{
  "annotations": {
    "list": [
      {
        "builtIn": 1,
        "datasource": {
          "type": "grafana",
          "uid": "-- Grafana --"
        },
        "enable": true,
        "hide": true,
        "iconColor": "rgba(0, 211, 255, 1)",
        "name": "Annotations & Alerts",
        "target": {
          "limit": 100,
          "matchAny": false,
          "tags": [],
          "type": "dashboard"
        },
        "type": "dashboard"
      }
    ]
  },
  "editable": true,
  "fiscalYearStartMonth": 0,
  "graphTooltip": 0,
  "id": 425,
  "links": [],
  "liveNow": false,
  "panels": [
    {
      "collapsed": false,
      "gridPos": {
        "h": 1,
        "w": 24,
        "x": 0,
        "y": 0
      },
      "id": 18,
      "panels": [],
      "repeat": "metro",
      "repeatDirection": "h",
      "title": "${metro}",
      "type": "row"
    },
    {
      "datasource": {
        "type": "doitintl-bigquery-datasource",
        "uid": "0zzHsf77z"
      },
      "gridPos": {
        "h": 10,
        "w": 6,
        "x": 0,
        "y": 1
      },
      "id": 11,
      "maxDataPoints": 80000,
      "options": {
        "config": {
          "displayModeBar": false
        },
        "data": [],
        "layout": {
          "font": {
            "color": "grey"
          },
          "legend": {
            "orientation": "h"
          },
          "margin": {
            "b": 50,
            "l": 50,
            "r": 50,
            "t": 10
          },
          "paper_bgcolor": "rgba(0, 0, 0, 0)",
          "plot_bgcolor": "rgba(0, 0, 0, 0)",
          "xaxis": {
            "autorange": true,
            "gridcolor": "#333",
            "range": [
              -1.01,
              3.470000000000003
            ],
            "type": "log"
          },
          "yaxis": {
            "autorange": true,
            "gridcolor": "#333",
            "range": [
              -0.0013482310722225798,
              0.025616390372229014
            ],
            "type": "linear"
          }
        },
        "onclick": "console.log(\"okay\");\nconsole.log(data)\n// window.updateVariables({query:{'var-project':'test'}, partial: true})",
        "script": "console.log(data);\nvar sites = {};\n\nvar x = data.series[0].fields[0].values.buffer;\nvar y = data.series[0].fields[1].values.buffer;\nvar names = data.series[0].fields[2].values.buffer;\n\nnames.forEach(site => {\n  sites[site] = {\n    x: [],\n    y: [],\n    name: site,\n    line: {\n      width: 1\n    }\n  }\n}); \nx.forEach((xv, i) => {\n  sites[names[i]].x.push(x[i]);\n  sites[names[i]].y.push(y[i]);\n})\nvar data = [];\nObject.keys(sites).sort().forEach(site => {\n  data.push(sites[site]);\n});\nconsole.log(data);\nvar site = \"atl03\";\nvar trace = {\n  x: x, //.filter((element, i) => names[i] === site),\n  y: y, //.filter((element, i) => names[i] === site),\n  name: names //.filter((element, i) => names[i] === site)\n};\nconsole.log(\"okay2\");\nconsole.log(trace);\n//return {data:[trace]};\nreturn {data:data};"
      },
      "targets": [
        {
          "datasource": {
            "type": "doitintl-bigquery-datasource",
            "uid": "0zzHsf77z"
          },
          "format": "table",
          "group": [],
          "metricColumn": "none",
          "orderByCol": "1",
          "orderBySort": "1",
          "rawQuery": true,
          "rawSql": "WITH xbins AS (\n\n  SELECT x, POW(10, x-.01) AS xleft, POW(10, x+.01) AS xright\n  FROM UNNEST(GENERATE_ARRAY(-1, 3.5, .02)) AS x\n\n), ndt7 AS (\n\n  SELECT *\n  FROM `measurement-lab.ndt_intermediate.extended_ndt7_downloads`\n  WHERE $__timeFilter(date) --date BETWEEN \"2023-03-04\" AND \"2023-03-04\"\n   AND REGEXP_CONTAINS(server.Site, \"${metro:regex}\")\n   AND (filter.IsComplete AND filter.IsProduction AND NOT filter.IsError AND NOT filter.IsOAM AND NOT filter.IsPlatformAnomaly\n        AND NOT filter.IsSmall AND NOT filter.IsShort AND NOT filter.IsLong AND NOT filter._IsRFC1918)\n\n), ndt7_into_xbins AS (\n\n  SELECT\n    xleft, xright, server.Site as site,\n    IF(a.MeanThroughputMbps BETWEEN xleft AND xright, 1, 0) AS mbps_present,\n  FROM ndt7, xbins\n\n), ndt7_xbins_counts AS (  \n\n  SELECT\n    xleft, site,\n    SUM(mbps_present) AS mbps_bin_count,\n  FROM   ndt7_into_xbins\n  GROUP BY xleft, site\n  ORDER BY xleft\n\n), ndt7_xbins_counts_site_sum AS (\n\n  SELECT  \n    xleft,\n    site,\n    mbps_bin_count,\n    SUM(mbps_bin_count) OVER (partition by site) AS mbps_site_sum,\n\n  FROM ndt7_xbins_counts\n  ORDER BY xleft\n\n), pdf_norm AS (\n\n  SELECT\n    xleft,\n    site,\n    mbps_bin_count / mbps_site_sum AS mbps_site_pdf,\n\n  FROM ndt7_xbins_counts_site_sum\n\n), cdf_norm AS (\n\n  SELECT\n    xleft,\n    site,\n    mbps_site_pdf, SUM(mbps_site_pdf) OVER (PARTITION BY site ORDER BY xleft ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS mbps_site_cdf,\n\n  FROM pdf_norm\n\n)\n\nSELECT\n  xleft,\n  CASE \"$mode\"\n    WHEN \"pdf\" THEN mbps_site_pdf\n    ELSE mbps_site_cdf\n  END AS data,\n  site,\n\nFROM cdf_norm\n",
          "refId": "A",
          "select": [
            [
              {
                "params": [
                  "-- value --"
                ],
                "type": "column"
              }
            ]
          ],
          "timeColumn": "-- time --",
          "timeColumnType": "DATE",
          "where": [
            {
              "name": "$__timeFilter",
              "params": [],
              "type": "macro"
            }
          ]
        }
      ],
      "title": "Download Mbps ($mode)",
      "type": "ae3e-plotly-panel"
    },
    {
      "datasource": {
        "type": "doitintl-bigquery-datasource",
        "uid": "0zzHsf77z"
      },
      "description": "",
      "gridPos": {
        "h": 10,
        "w": 6,
        "x": 6,
        "y": 1
      },
      "id": 12,
      "maxDataPoints": 80000,
      "options": {
        "config": {
          "displayModeBar": false
        },
        "data": [],
        "layout": {
          "font": {
            "color": "grey"
          },
          "legend": {
            "orientation": "h"
          },
          "margin": {
            "b": 50,
            "l": 50,
            "r": 50,
            "t": 10
          },
          "paper_bgcolor": "rgba(0, 0, 0, 0)",
          "plot_bgcolor": "rgba(0, 0, 0, 0)",
          "xaxis": {
            "autorange": true,
            "gridcolor": "#333",
            "range": [
              -1.01,
              2.670000000000002
            ],
            "type": "log"
          },
          "yaxis": {
            "autorange": true,
            "gridcolor": "#333",
            "range": [
              -0.0019026585042473884,
              0.03615051158070038
            ],
            "type": "linear"
          }
        },
        "onclick": "console.log(\"okay\");\nconsole.log(data)\n// window.updateVariables({query:{'var-project':'test'}, partial: true})",
        "script": "console.log(data);\nvar sites = {};\n\nvar x = data.series[0].fields[0].values.buffer;\nvar y = data.series[0].fields[1].values.buffer;\nvar names = data.series[0].fields[2].values.buffer;\n\nnames.forEach(site => {\n  sites[site] = {\n    x: [],\n    y: [],\n    name: site,\n    line: {\n      width: 1\n    }\n  }\n}); \nx.forEach((xv, i) => {\n  sites[names[i]].x.push(x[i]);\n  sites[names[i]].y.push(y[i]);\n})\nvar data = [];\nObject.keys(sites).sort().forEach(site => {\n  data.push(sites[site]);\n});\nconsole.log(data);\nvar site = \"atl03\";\nvar trace = {\n  x: x, //.filter((element, i) => names[i] === site),\n  y: y, //.filter((element, i) => names[i] === site),\n  name: names //.filter((element, i) => names[i] === site)\n};\nconsole.log(\"okay2\");\nconsole.log(trace);\n//return {data:[trace]};\nreturn {data:data};"
      },
      "targets": [
        {
          "datasource": {
            "type": "doitintl-bigquery-datasource",
            "uid": "0zzHsf77z"
          },
          "format": "table",
          "group": [],
          "metricColumn": "none",
          "orderByCol": "1",
          "orderBySort": "1",
          "rawQuery": true,
          "rawSql": "WITH xbins AS (\n\n  SELECT x, POW(10, x-.01) AS xleft, POW(10, x+.01) AS xright\n  FROM UNNEST(GENERATE_ARRAY(-1, 2.7, .02)) AS x\n\n), ndt7 AS (\n\n  SELECT *\n  FROM `measurement-lab.ndt_intermediate.extended_ndt7_downloads`\n  WHERE $__timeFilter(date) --date BETWEEN \"2023-03-04\" AND \"2023-03-04\"\n   AND REGEXP_CONTAINS(server.Site, \"${metro:regex}\")\n   AND (filter.IsComplete AND filter.IsProduction AND NOT filter.IsError AND NOT filter.IsOAM AND NOT filter.IsPlatformAnomaly\n        AND NOT filter.IsSmall AND NOT filter.IsShort AND NOT filter.IsLong AND NOT filter._IsRFC1918)\n\n), ndt7_into_xbins AS (\n\n  SELECT\n    xleft, xright, server.Site as site,\n    IF(a.MinRTT BETWEEN xleft AND xright, 1, 0) AS minrtt_present,\n  FROM ndt7, xbins\n\n), ndt7_xbins_counts AS (  \n\n  SELECT\n    xleft, site,\n    SUM(minrtt_present) AS minrtt_bin_count,\n  FROM   ndt7_into_xbins\n  GROUP BY xleft, site\n  ORDER BY xleft\n\n), ndt7_xbins_counts_site_sum AS (\n\n  SELECT  \n    xleft,\n    site,\n    minrtt_bin_count,\n    SUM(minrtt_bin_count) OVER (partition by site) AS minrtt_site_sum,\n  FROM ndt7_xbins_counts\n  ORDER BY xleft\n\n), pdf_norm AS (\n\n  SELECT\n    xleft,\n    site,\n    minrtt_bin_count / minrtt_site_sum AS minrtt_site_pdf,\n  FROM ndt7_xbins_counts_site_sum\n\n), cdf_norm AS (\n\n  SELECT\n    xleft,\n    site,\n    minrtt_site_pdf, SUM(minrtt_site_pdf) OVER (PARTITION BY site ORDER BY xleft ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS minrtt_site_cdf,\n  FROM pdf_norm\n\n)\n\nSELECT\n  xleft,\n  CASE \"$mode\"\n    WHEN \"pdf\" THEN minrtt_site_pdf\n    ELSE minrtt_site_cdf\n  END AS data,\n  site,\n\nFROM cdf_norm\n",
          "refId": "A",
          "select": [
            [
              {
                "params": [
                  "-- value --"
                ],
                "type": "column"
              }
            ]
          ],
          "timeColumn": "-- time --",
          "timeColumnType": "DATE",
          "where": [
            {
              "name": "$__timeFilter",
              "params": [],
              "type": "macro"
            }
          ]
        }
      ],
      "title": "Download MinRTT ($mode)",
      "type": "ae3e-plotly-panel"
    },
    {
      "datasource": {
        "type": "doitintl-bigquery-datasource",
        "uid": "0zzHsf77z"
      },
      "description": "",
      "gridPos": {
        "h": 10,
        "w": 6,
        "x": 12,
        "y": 1
      },
      "id": 13,
      "maxDataPoints": 80000,
      "options": {
        "config": {
          "displayModeBar": false
        },
        "data": [],
        "layout": {
          "font": {
            "color": "grey"
          },
          "legend": {
            "orientation": "h"
          },
          "margin": {
            "b": 50,
            "l": 50,
            "r": 50,
            "t": 10
          },
          "paper_bgcolor": "rgba(0, 0, 0, 0)",
          "plot_bgcolor": "rgba(0, 0, 0, 0)",
          "xaxis": {
            "autorange": true,
            "gridcolor": "#333",
            "range": [
              -6.009999999999999,
              -0.010000000000039328
            ],
            "type": "log"
          },
          "yaxis": {
            "autorange": true,
            "gridcolor": "#333",
            "range": [
              -0.0005549481496206475,
              0.0105440148427923
            ],
            "type": "linear"
          }
        },
        "onclick": "console.log(\"okay\");\nconsole.log(data)\n// window.updateVariables({query:{'var-project':'test'}, partial: true})",
        "script": "console.log(data);\nvar sites = {};\n\nvar x = data.series[0].fields[0].values.buffer;\nvar y = data.series[0].fields[1].values.buffer;\nvar names = data.series[0].fields[2].values.buffer;\n\nnames.forEach(site => {\n  sites[site] = {\n    x: [],\n    y: [],\n    name: site,\n    line: {\n      width: 1\n    }\n  }\n}); \nx.forEach((xv, i) => {\n  sites[names[i]].x.push(x[i]);\n  sites[names[i]].y.push(y[i]);\n})\nvar data = [];\nObject.keys(sites).sort().forEach(site => {\n  data.push(sites[site]);\n});\nconsole.log(data);\nvar site = \"atl03\";\nvar trace = {\n  x: x, //.filter((element, i) => names[i] === site),\n  y: y, //.filter((element, i) => names[i] === site),\n  name: names //.filter((element, i) => names[i] === site)\n};\nconsole.log(\"okay2\");\nconsole.log(trace);\n//return {data:[trace]};\nreturn {data:data};"
      },
      "targets": [
        {
          "datasource": {
            "type": "doitintl-bigquery-datasource",
            "uid": "0zzHsf77z"
          },
          "format": "table",
          "group": [],
          "metricColumn": "none",
          "orderByCol": "1",
          "orderBySort": "1",
          "rawQuery": true,
          "rawSql": "WITH xbins AS (\n\n  SELECT x, POW(10, x-.01) AS xleft, POW(10, x+.01) AS xright\n  FROM UNNEST(GENERATE_ARRAY(-6, 0, .02)) AS x\n\n), ndt7 AS (\n\n  SELECT *\n  FROM `measurement-lab.ndt_intermediate.extended_ndt7_downloads`\n  WHERE $__timeFilter(date) --date BETWEEN \"2023-03-04\" AND \"2023-03-04\"\n   AND REGEXP_CONTAINS(server.Site, \"${metro:regex}\")\n   AND (filter.IsComplete AND filter.IsProduction AND NOT filter.IsError AND NOT filter.IsOAM AND NOT filter.IsPlatformAnomaly\n        AND NOT filter.IsSmall AND NOT filter.IsShort AND NOT filter.IsLong AND NOT filter._IsRFC1918)\n\n), ndt7_into_xbins AS (\n\n  SELECT\n    xleft, xright, server.Site as site,\n    IF(a.LossRate BETWEEN xleft AND xright, 1, 0) AS lossrate_present,\n  FROM ndt7, xbins\n\n), ndt7_xbins_counts AS (  \n\n  SELECT\n    xleft, site,\n    SUM(lossrate_present) AS lossrate_bin_count,\n  FROM   ndt7_into_xbins\n  GROUP BY xleft, site\n  ORDER BY xleft\n\n), ndt7_xbins_counts_site_sum AS (\n\n  SELECT  \n    xleft,\n    site,\n    lossrate_bin_count,\n    SUM(lossrate_bin_count) OVER (partition by site) AS lossrate_site_sum,\n  FROM ndt7_xbins_counts\n  ORDER BY xleft\n\n), pdf_norm AS (\n\n  SELECT\n    xleft,\n    site,\n    SAFE_DIVIDE(lossrate_bin_count, lossrate_site_sum) AS lossrate_site_pdf,\n  FROM ndt7_xbins_counts_site_sum\n\n), cdf_norm AS (\n\n  SELECT\n    xleft,\n    site,\n    lossrate_site_pdf, SUM(lossrate_site_pdf) OVER (PARTITION BY site ORDER BY xleft ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS lossrate_site_cdf,\n  FROM pdf_norm\n\n)\n\nSELECT\n  xleft,\n  CASE \"$mode\"\n    WHEN \"pdf\" THEN lossrate_site_pdf\n    ELSE lossrate_site_cdf\n  END AS data,\n  site,\n\nFROM cdf_norm",
          "refId": "A",
          "select": [
            [
              {
                "params": [
                  "-- value --"
                ],
                "type": "column"
              }
            ]
          ],
          "timeColumn": "-- time --",
          "timeColumnType": "DATE",
          "where": [
            {
              "name": "$__timeFilter",
              "params": [],
              "type": "macro"
            }
          ]
        }
      ],
      "title": "Download LossRate ($mode)",
      "type": "ae3e-plotly-panel"
    },
    {
      "datasource": {
        "type": "doitintl-bigquery-datasource",
        "uid": "0zzHsf77z"
      },
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "palette-classic"
          },
          "custom": {
            "axisCenteredZero": false,
            "axisColorMode": "text",
            "axisLabel": "",
            "axisPlacement": "auto",
            "barAlignment": 0,
            "drawStyle": "line",
            "fillOpacity": 0,
            "gradientMode": "none",
            "hideFrom": {
              "legend": false,
              "tooltip": false,
              "viz": false
            },
            "lineInterpolation": "linear",
            "lineStyle": {
              "fill": "solid"
            },
            "lineWidth": 1,
            "pointSize": 5,
            "scaleDistribution": {
              "type": "linear"
            },
            "showPoints": "auto",
            "spanNulls": false,
            "stacking": {
              "group": "A",
              "mode": "none"
            },
            "thresholdsStyle": {
              "mode": "off"
            }
          },
          "mappings": [],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "green",
                "value": null
              },
              {
                "color": "red",
                "value": 80
              }
            ]
          }
        },
        "overrides": []
      },
      "gridPos": {
        "h": 10,
        "w": 6,
        "x": 18,
        "y": 1
      },
      "id": 16,
      "maxDataPoints": 80000,
      "options": {
        "legend": {
          "calcs": [],
          "displayMode": "list",
          "placement": "bottom",
          "showLegend": true
        },
        "tooltip": {
          "mode": "multi",
          "sort": "desc"
        }
      },
      "targets": [
        {
          "datasource": {
            "type": "doitintl-bigquery-datasource",
            "uid": "0zzHsf77z"
          },
          "format": "time_series",
          "group": [],
          "metricColumn": "none",
          "orderByCol": "1",
          "orderBySort": "1",
          "rawQuery": true,
          "rawSql": "SELECT TIMESTAMP_TRUNC(a.TestTime, HOUR) as date, server.Site as metric, COUNT(*) as total\nFROM `measurement-lab.ndt_intermediate.extended_ndt7_downloads`\nWHERE\n   $__timeFilter(date)\n AND REGEXP_CONTAINS(server.Site, \"${metro:regex}\")\nGROUP by date, metric\nORDER BY date, metric",
          "refId": "A",
          "select": [
            [
              {
                "params": [
                  "-- value --"
                ],
                "type": "column"
              }
            ]
          ],
          "timeColumn": "-- time --",
          "timeColumnType": "DATE",
          "where": [
            {
              "name": "$__timeFilter",
              "params": [],
              "type": "macro"
            }
          ]
        }
      ],
      "title": "Test Counts (hourly, downloads only)",
      "type": "timeseries"
    }
  ],
  "refresh": false,
  "schemaVersion": 37,
  "style": "dark",
  "tags": [],
  "templating": {
    "list": [
      {
        "current": {
          "selected": true,
          "text": [
            "atl"
          ],
          "value": [
            "atl"
          ]
        },
        "datasource": {
          "type": "prometheus",
          "uid": "WW1Jk2sGk"
        },
        "definition": "label_values(ndt_test_rate_mbps_count{site_type=~\"$type\"}, machine)",
        "hide": 0,
        "includeAll": false,
        "multi": true,
        "name": "metro",
        "options": [],
        "query": {
          "query": "label_values(ndt_test_rate_mbps_count{site_type=~\"$type\"}, machine)",
          "refId": "StandardVariableQuery"
        },
        "refresh": 1,
        "regex": "/mlab[1-4].([a-z]{3}).*/",
        "skipUrlSync": false,
        "sort": 1,
        "type": "query"
      },
      {
        "current": {
          "selected": false,
          "text": [
            "physical",
            "virtual"
          ],
          "value": [
            "physical",
            "virtual"
          ]
        },
        "hide": 0,
        "includeAll": false,
        "multi": true,
        "name": "type",
        "options": [
          {
            "selected": true,
            "text": "physical",
            "value": "physical"
          },
          {
            "selected": true,
            "text": "virtual",
            "value": "virtual"
          }
        ],
        "query": "physical,virtual",
        "queryValue": "",
        "skipUrlSync": false,
        "type": "custom"
      },
      {
        "current": {
          "selected": false,
          "text": "pdf",
          "value": "pdf"
        },
        "hide": 0,
        "includeAll": false,
        "multi": false,
        "name": "mode",
        "options": [
          {
            "selected": true,
            "text": "pdf",
            "value": "pdf"
          },
          {
            "selected": false,
            "text": "cdf",
            "value": "cdf"
          }
        ],
        "query": "pdf,cdf",
        "queryValue": "",
        "skipUrlSync": false,
        "type": "custom"
      }
    ]
  },
  "time": {
    "from": "now-14d",
    "to": "now"
  },
  "timepicker": {},
  "timezone": "",
  "title": "NDT: Metro Performance Distributions",
  "uid": "ZCG2vk8Vk",
  "version": 17,
  "weekStart": ""
}
