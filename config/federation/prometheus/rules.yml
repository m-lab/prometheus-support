# M-Lab prometheus recording rules.
#
# Before adding a new recording rule, review the general documentation and best
# practices.
#
#  * https://prometheus.io/docs/querying/rules/
#  * https://prometheus.io/docs/practices/rules/
#
# NOTE: As of 2017-11, the Prometheus v1.x series evaluates all rules in
# parallel. So, rule evaluation order is not guaranteed, and dependencies
# between rules are not respected. Using recording rules on the right hand
# side of an expression can have undefined behavior and may result in recording
# old data or other errors. This is also true for Alerts. This limitation is
# fixed in the Prometheus v2.x series.
#
# TODO: Prometheus v2.x rules are evaluated in order.
#
#    https://github.com/prometheus/prometheus/blob/v1.8.2/rules/manager.go#L254
#
# DO:
#  * Do use raw prometheus expressions on the right hand side of a new rule.
#  * "Recording rules should be of the general form level:metric:operations."
#  * Do use irate with a range that is 4x scrape_interval.
#
# DO NOT:
#  * Do not use recording rules on the right hand side of a new rule.
#  * Do not overwrite a metric name with itself.
#  * Do not use 'label_replace' to overwrite a metric name.
#  * Do not use rate with a range less than 4x the scrape_interval.
groups:
- name: rules.yml
  rules:
# Precalculate the increase of ipv4 and ipv6 sidestream connections.
  - record: ipv4_and_ipv6:sidestream_connection_count:increase2m
    expr: increase(sidestream_connection_count{type=~"ipv4|ipv6"}[2m])
# Precalculate the sum of sidestream connections per machine.
  - record: instance:sidestream_connection_count:increase2m
    expr: sum by(instance) (increase(sidestream_connection_count{type=~"ipv4|ipv6"}[2m]))
# Precalculate the sum of sidestream connections per experiment "last six bits".
  - record: lsb:sidestream_connection_count:increase2m
    expr: sum by(lsb) (increase(sidestream_connection_count{type=~"ipv4|ipv6"}[2m]))

## NDT Early Warning aggregation rules.
#
# Rules are evaluated every global.evaluation_interval seconds. When
# scrape_interval equals the evaluation_interval, there are potential races for
# short range operators, e.g. 2m when the eval and scrape intervals are 1m. At
# evaluation time, not every timeseries will contain 2 points in a 2m window.
#
# If we want to calculate the rate over 2m and increase the likelihood that we
# see at least two points we must use irate with a larger window, e.g. 4x the
# scrape interval. In our case this is 4m. irate only uses the last two samples
# to calculate an instantaneous rate.
#
# Per-machine inotify creation rates, using only c2s_snaplog + s2c_snaplog files.
# Units: requests per minute.
  - record: machine:inotify_extension_create:rpm2m
    expr: 60 * sum without(ext) (irate(inotify_extension_create_total{ext=~".*_snaplog"}[4m]))
  # TODO: aggregate on per-machine interface aliases when available.
  # Per-switch "Out" (i.e. Download) bits per second. We use irate to calculate
  # rates over the last two samples only.
  # Units: bits per second.
  - record: switch:ifHCOutOctets:bps2m
    expr: 8 * irate(ifHCOutOctets{ifAlias="uplink"}[4m])
  # Per-machine maximum ratio of time spent performing I/O on all devices.
  # Units: none (sec/sec)
  - record: machine:node_disk_io_time_ms:max_ratio2m
    expr: max without(device) (irate(node_disk_io_time_ms{service="nodeexporter"}[4m])) / 1000
  # NDT vserver disk quota utilization, 12 hour estimate. Base 12h estimate on a
  # time range at least 25% of the time forward.
  # Units: KB
  # TODO: remove this metric in favor of the ratio metrics below.
  - record: ndt:vdlimit_used:predict_linear3h_12h
    expr: predict_linear(vdlimit_used{experiment="ndt.iupui"}[3h], 12 * 60 * 60)
  # NOTE: here we add a ratio value to calculate %used rather than an absolute usage count.
  - record: ndt:vdlimit_used_bytes:ratio
    expr: vdlimit_used{experiment="ndt.iupui"} / vdlimit_total{experiment="ndt.iupui"}
  - record: ndt:vdlimit_used_ratio:predict_linear3h_12h
    expr: predict_linear(ndt:vdlimit_used_bytes:ratio[3h], 12 * 60 * 60)

## NDT Early Warning aggregation rules for Kubernetes platform.
#
# Per-machine successful NDT5 tests counted by the server.
# Units: requests per minute.
  - record: machine:ndt5_client_test_results:rpm2m
    expr: 60 * sum by(machine) (irate(ndt5_client_test_results_total{result!="error-without-rate"}[4m]))
  # Per-machine maximum ratio of time spent performing I/O on all devices.
  # Units: none (sec/sec)
  - record: machine:node_disk_io_time_seconds:max2m
    expr: max without(device) (irate(node_disk_io_time_seconds_total{deployment="node-exporter"}[4m]))
  # Machine disk quota utilization, 12 hour estimate. Base 12h estimate on a
  # time range at least 25% of the time forward.
  # Units: none (bytes/bytes)
  - record: machine:node_filesystem_used_bytes:ratio
    expr: 1 - node_filesystem_avail_bytes{mountpoint="/cache/data"} / node_filesystem_size_bytes{mountpoint="/cache/data"}
  # NOTE: this expression uses the recording rule above. This may add an extra
  # minute to current data, but the time scale of the prediction is much longer.
  - record: machine:node_filesystem_used_ratio:predict_linear3h_12h
    expr: predict_linear(machine:node_filesystem_used_bytes:ratio[3h], 12 * 60 * 60)

## Switch SNMP metrics
#
# Discarded packets for Junipers
  - record: switch:jnxCosQstatTotalDropPkts:irate4m_gt_0
    expr: irate(jnxCosQstatTotalDropPkts{ifAlias="uplink",qNumber="0"}[4m]) > 0
  - record: switch:jnxCosQstatTotalDropPkts:irate4m
    expr: irate(jnxCosQstatTotalDropPkts{ifAlias="uplink",qNumber="0"}[4m])
# Discarded packets for HPs and Ciscos
  - record: switch:ifOutDiscards:irate4m_gt_0
    expr: irate(ifOutDiscards{ifAlias="uplink"}[4m]) > 0
  - record: switch:ifOutDiscards:irate4m
    expr: irate(ifOutDiscards{ifAlias="uplink"}[4m])
##############################################################################
# Candidate recording rules.
##############################################################################
# TODO: remove rules that are not actively used.
#
# Do not build dependencies on these rules until they have been moved out of
# this candidate rule area.
#
## NDT Early Warning 2x site capacity thresholds.
#
# Shorter time ranges are chosen to favor higher sensitivity and longer time
# ranges are chosen for lower sensitivity.
#
# 90th percentiles @ 30m
  - record: candidate_site:uplink:90th_quantile_30m
    expr: quantile_over_time(0.9, switch:ifHCOutOctets:bps2m{ifAlias="uplink"}[30m])
  # vserver
  - record: candidate_machine:inotify_extension_create_rpm:90th_quantile_30m
    expr: quantile_over_time(0.9, machine:inotify_extension_create:rpm2m[30m])
  - record: candidate_machine:node_disk_io_time_ratio:90th_quantile_30m
    expr: quantile_over_time(0.9, machine:node_disk_io_time_ms:max_ratio2m[30m])
  - record: candidate_ndt:vdlimit_used_ratio_12h_prediction:90th_quantile_30m
    expr: quantile_over_time(0.9, ndt:vdlimit_used_ratio:predict_linear3h_12h[30m])
  # k8s
  - record: machine:ndt5_client_test_results_rpm:90th_quantile_30m
    expr: quantile_over_time(0.9, machine:ndt5_client_test_results:rpm2m[30m])
  - record: machine:node_disk_io_time_seconds_max:90th_quantile_30m
    expr: quantile_over_time(0.9, machine:node_disk_io_time_seconds:max2m[30m])
  - record: machine:node_filesystem_used_ratio_12h_prediction:90th_quantile_30m
    expr: quantile_over_time(0.9, machine:node_filesystem_ratio_bytes:predict_linear3h_12h[30m])

# 90th percentiles @ 1h.
  - record: candidate_site:uplink:90th_quantile_1h
    expr: quantile_over_time(0.9, switch:ifHCOutOctets:bps2m{ifAlias="uplink"}[1h])
  # vserver
  - record: candidate_machine:inotify_extension_create_rpm:90th_quantile_1h
    expr: quantile_over_time(0.9, machine:inotify_extension_create:rpm2m[1h])
  - record: candidate_machine:node_disk_io_time_ratio:90th_quantile_1h
    expr: quantile_over_time(0.9, machine:node_disk_io_time_ms:max_ratio2m[1h])
  - record: candidate_ndt:vdlimit_used_ratio_12h_prediction:90th_quantile_1h
    expr: quantile_over_time(0.9, ndt:vdlimit_used_ratio:predict_linear3h_12h[1h])
  # k8s
  - record: machine:ndt5_client_test_results_rpm:90th_quantile_1h
    expr: quantile_over_time(0.9, machine:ndt5_client_test_results:rpm2m[1h])
  - record: machine:node_disk_io_time_seconds_max:90th_quantile_1h
    expr: quantile_over_time(0.9, machine:node_disk_io_time_seconds:max2m[1h])
  - record: machine:node_filesystem_used_ratio_12h_prediction:90th_quantile_1h
    expr: quantile_over_time(0.9, machine:node_filesystem_used_ratio:predict_linear3h_12h[1h])

# 90th percentiles @ 2h.
  - record: candidate_site:uplink:90th_quantile_2h
    expr: quantile_over_time(0.9, switch:ifHCOutOctets:bps2m{ifAlias="uplink"}[2h])
  # vserver
  - record: candidate_machine:inotify_extension_create_rpm:90th_quantile_2h
    expr: quantile_over_time(0.9, machine:inotify_extension_create:rpm2m[2h])
  - record: candidate_machine:node_disk_io_time_ratio:90th_quantile_2h
    expr: quantile_over_time(0.9, machine:node_disk_io_time_ms:max_ratio2m[2h])
  - record: candidate_ndt:vdlimit_used_ratio_12h_prediction:90th_quantile_2h
    expr: quantile_over_time(0.9, ndt:vdlimit_used_ratio:predict_linear3h_12h[2h])
  # k8s
  - record: machine:ndt5_client_test_results_rpm:90th_quantile_2h
    expr: quantile_over_time(0.9, machine:ndt5_client_test_results:rpm2m[2h])
  - record: machine:node_disk_io_time_seconds_max:90th_quantile_2h
    expr: quantile_over_time(0.9, machine:node_disk_io_time_seconds:max2m[2h])
  - record: machine:node_filesystem_used_ratio_12h_prediction:90th_quantile_2h
    expr: quantile_over_time(0.9, machine:node_filesystem_used_ratio:predict_linear3h_12h[2h])

# 90th percentiles @ 6h.
  - record: candidate_site:uplink:90th_quantile_6h
    expr: quantile_over_time(0.9, switch:ifHCOutOctets:bps2m{ifAlias="uplink"}[6h])
  # vserver
  - record: candidate_machine:inotify_extension_create_rpm:90th_quantile_6h
    expr: quantile_over_time(0.9, machine:inotify_extension_create:rpm2m[6h])
  - record: candidate_machine:node_disk_io_time_ratio:90th_quantile_6h
    expr: quantile_over_time(0.9, machine:node_disk_io_time_ms:max_ratio2m[6h])
  - record: candidate_ndt:vdlimit_used_ratio_12h_prediction:90th_quantile_6h
    expr: quantile_over_time(0.9, ndt:vdlimit_used_ratio:predict_linear3h_12h[6h])
  # k8s
  - record: machine:ndt5_client_test_results_rpm:90th_quantile_6h
    expr: quantile_over_time(0.9, machine:ndt5_client_test_results:rpm2m[6h])
  - record: machine:node_disk_io_time_seconds_max:90th_quantile_6h
    expr: quantile_over_time(0.9, machine:node_disk_io_time_seconds:max2m[6h])
  - record: machine:node_filesystem_used_ratio_12h_prediction:90th_quantile_6h
    expr: quantile_over_time(0.9, machine:node_filesystem_used_ratio:predict_linear3h_12h[6h])

##############################################################################
# 98th percentiles @ 2h.
  - record: candidate_site:uplink:98th_quantile_2h
    expr: quantile_over_time(0.98, switch:ifHCOutOctets:bps2m{ifAlias="uplink"}[2h])
  # vserver
  - record: candidate_machine:inotify_extension_create_rpm:98th_quantile_2h
    expr: quantile_over_time(0.98, machine:inotify_extension_create:rpm2m[2h])
  - record: candidate_machine:node_disk_io_time_ratio:98th_quantile_2h
    expr: quantile_over_time(0.98, machine:node_disk_io_time_ms:max_ratio2m[2h])
  - record: candidate_ndt:vdlimit_used_ratio_12h_prediction:98th_quantile_2h
    expr: quantile_over_time(0.98, ndt:vdlimit_used_ratio:predict_linear3h_12h[2h])
  # k8s
  - record: machine:ndt5_client_test_results_rpm:98th_quantile_2h
    expr: quantile_over_time(0.98, machine:ndt5_client_test_results:rpm2m[2h])
  - record: machine:node_disk_io_time_seconds_max:98th_quantile_2h
    expr: quantile_over_time(0.98, machine:node_disk_io_time_seconds:max2m[2h])
  - record: machine:node_filesystem_used_ratio_12h_prediction:98th_quantile_2h
    expr: quantile_over_time(0.98, machine:node_filesystem_used_ratio:predict_linear3h_12h[2h])

# 98th percentiles @ 6h.
  - record: candidate_site:uplink:98th_quantile_6h
    expr: quantile_over_time(0.98, switch:ifHCOutOctets:bps2m{ifAlias="uplink"}[6h])
  # vserver
  - record: candidate_machine:inotify_extension_create_rpm:98th_quantile_6h
    expr: quantile_over_time(0.98, machine:inotify_extension_create:rpm2m[6h])
  - record: candidate_machine:node_disk_io_time_ratio:98th_quantile_6h
    expr: quantile_over_time(0.98, machine:node_disk_io_time_ms:max_ratio2m[6h])
  - record: candidate_ndt:vdlimit_used_ratio_12h_prediction:98th_quantile_6h
    expr: quantile_over_time(0.98, ndt:vdlimit_used_ratio:predict_linear3h_12h[6h])
  # k8s
  - record: machine:ndt5_client_test_results_rpm:98th_quantile_6h
    expr: quantile_over_time(0.98, machine:ndt5_client_test_results:rpm2m[6h])
  - record: machine:node_disk_io_time_seconds_max:98th_quantile_6h
    expr: quantile_over_time(0.98, machine:node_disk_io_time_seconds:max2m[6h])
  - record: machine:node_filesystem_used_ratio_12h_prediction:98th_quantile_6h
    expr: quantile_over_time(0.98, machine:node_filesystem_used_ratio:predict_linear3h_12h[6h])

## Parser volume checks.
#
# This rule optimizes the alert query used for ParserDailyVolumeTooLow. Rather
# than calculate multi-day values continuously, this rule will maintain a history
# of the precalculated value needed by the rule.
  - record: candidate_service:etl_test_count:increase24h
    expr: sum by(service) (increase(etl_test_count{service!~".*batch.*",status="ok"}[1d]))
